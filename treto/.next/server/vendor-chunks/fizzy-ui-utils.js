"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fizzy-ui-utils";
exports.ids = ["vendor-chunks/fizzy-ui-utils"];
exports.modules = {

/***/ "(ssr)/./node_modules/fizzy-ui-utils/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/fizzy-ui-utils/utils.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n/**\n * Fizzy UI utils v2.0.7\n * MIT license\n */ /*jshint browser: true, undef: true, unused: true, strict: true */ (function(window1, factory) {\n    // universal module definition\n    /*jshint strict: false */ /*globals define, module, require */ if (true) {\n        // AMD\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! desandro-matches-selector/matches-selector */ \"(ssr)/./node_modules/desandro-matches-selector/matches-selector.js\")\n        ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(matchesSelector) {\n            return factory(window1, matchesSelector);\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(window, function factory(window1, matchesSelector) {\n    \"use strict\";\n    var utils = {};\n    // ----- extend ----- //\n    // extends objects\n    utils.extend = function(a, b) {\n        for(var prop in b){\n            a[prop] = b[prop];\n        }\n        return a;\n    };\n    // ----- modulo ----- //\n    utils.modulo = function(num, div) {\n        return (num % div + div) % div;\n    };\n    // ----- makeArray ----- //\n    var arraySlice = Array.prototype.slice;\n    // turn element or nodeList into an array\n    utils.makeArray = function(obj) {\n        if (Array.isArray(obj)) {\n            // use object if already an array\n            return obj;\n        }\n        // return empty array if undefined or null. #6\n        if (obj === null || obj === undefined) {\n            return [];\n        }\n        var isArrayLike = typeof obj == \"object\" && typeof obj.length == \"number\";\n        if (isArrayLike) {\n            // convert nodeList to array\n            return arraySlice.call(obj);\n        }\n        // array of single index\n        return [\n            obj\n        ];\n    };\n    // ----- removeFrom ----- //\n    utils.removeFrom = function(ary, obj) {\n        var index = ary.indexOf(obj);\n        if (index != -1) {\n            ary.splice(index, 1);\n        }\n    };\n    // ----- getParent ----- //\n    utils.getParent = function(elem, selector) {\n        while(elem.parentNode && elem != document.body){\n            elem = elem.parentNode;\n            if (matchesSelector(elem, selector)) {\n                return elem;\n            }\n        }\n    };\n    // ----- getQueryElement ----- //\n    // use element as selector string\n    utils.getQueryElement = function(elem) {\n        if (typeof elem == \"string\") {\n            return document.querySelector(elem);\n        }\n        return elem;\n    };\n    // ----- handleEvent ----- //\n    // enable .ontype to trigger from .addEventListener( elem, 'type' )\n    utils.handleEvent = function(event) {\n        var method = \"on\" + event.type;\n        if (this[method]) {\n            this[method](event);\n        }\n    };\n    // ----- filterFindElements ----- //\n    utils.filterFindElements = function(elems, selector) {\n        // make array of elems\n        elems = utils.makeArray(elems);\n        var ffElems = [];\n        elems.forEach(function(elem) {\n            // check that elem is an actual element\n            if (!(elem instanceof HTMLElement)) {\n                return;\n            }\n            // add elem if no selector\n            if (!selector) {\n                ffElems.push(elem);\n                return;\n            }\n            // filter & find items if we have a selector\n            // filter\n            if (matchesSelector(elem, selector)) {\n                ffElems.push(elem);\n            }\n            // find children\n            var childElems = elem.querySelectorAll(selector);\n            // concat childElems to filterFound array\n            for(var i = 0; i < childElems.length; i++){\n                ffElems.push(childElems[i]);\n            }\n        });\n        return ffElems;\n    };\n    // ----- debounceMethod ----- //\n    utils.debounceMethod = function(_class, methodName, threshold) {\n        threshold = threshold || 100;\n        // original method\n        var method = _class.prototype[methodName];\n        var timeoutName = methodName + \"Timeout\";\n        _class.prototype[methodName] = function() {\n            var timeout = this[timeoutName];\n            clearTimeout(timeout);\n            var args = arguments;\n            var _this = this;\n            this[timeoutName] = setTimeout(function() {\n                method.apply(_this, args);\n                delete _this[timeoutName];\n            }, threshold);\n        };\n    };\n    // ----- docReady ----- //\n    utils.docReady = function(callback) {\n        var readyState = document.readyState;\n        if (readyState == \"complete\" || readyState == \"interactive\") {\n            // do async to allow for other scripts to run. metafizzy/flickity#441\n            setTimeout(callback);\n        } else {\n            document.addEventListener(\"DOMContentLoaded\", callback);\n        }\n    };\n    // ----- htmlInit ----- //\n    // http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/\n    utils.toDashed = function(str) {\n        return str.replace(/(.)([A-Z])/g, function(match, $1, $2) {\n            return $1 + \"-\" + $2;\n        }).toLowerCase();\n    };\n    var console = window1.console;\n    /**\n * allow user to initialize classes via [data-namespace] or .js-namespace class\n * htmlInit( Widget, 'widgetName' )\n * options are parsed from data-namespace-options\n */ utils.htmlInit = function(WidgetClass, namespace) {\n        utils.docReady(function() {\n            var dashedNamespace = utils.toDashed(namespace);\n            var dataAttr = \"data-\" + dashedNamespace;\n            var dataAttrElems = document.querySelectorAll(\"[\" + dataAttr + \"]\");\n            var jsDashElems = document.querySelectorAll(\".js-\" + dashedNamespace);\n            var elems = utils.makeArray(dataAttrElems).concat(utils.makeArray(jsDashElems));\n            var dataOptionsAttr = dataAttr + \"-options\";\n            var jQuery = window1.jQuery;\n            elems.forEach(function(elem) {\n                var attr = elem.getAttribute(dataAttr) || elem.getAttribute(dataOptionsAttr);\n                var options;\n                try {\n                    options = attr && JSON.parse(attr);\n                } catch (error) {\n                    // log error, do not initialize\n                    if (console) {\n                        console.error(\"Error parsing \" + dataAttr + \" on \" + elem.className + \": \" + error);\n                    }\n                    return;\n                }\n                // initialize\n                var instance = new WidgetClass(elem, options);\n                // make available via $().data('namespace')\n                if (jQuery) {\n                    jQuery.data(elem, namespace, instance);\n                }\n            });\n        });\n    };\n    // -----  ----- //\n    return utils;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fizzy-ui-utils/utils.js\n");

/***/ })

};
;