"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/outlayer";
exports.ids = ["vendor-chunks/outlayer"];
exports.modules = {

/***/ "(ssr)/./node_modules/outlayer/item.js":
/*!***************************************!*\
  !*** ./node_modules/outlayer/item.js ***!
  \***************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n/**\n * Outlayer Item\n */ (function(window1, factory) {\n    // universal module definition\n    /* jshint strict: false */ /* globals define, module, require */ if (true) {\n        // AMD - RequireJS\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! ev-emitter/ev-emitter */ \"(ssr)/./node_modules/ev-emitter/ev-emitter.js\"),\n            __webpack_require__(/*! get-size/get-size */ \"(ssr)/./node_modules/get-size/get-size.js\")\n        ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(window, function factory(EvEmitter, getSize) {\n    \"use strict\";\n    // ----- helpers ----- //\n    function isEmptyObj(obj) {\n        for(var prop in obj){\n            return false;\n        }\n        prop = null;\n        return true;\n    }\n    // -------------------------- CSS3 support -------------------------- //\n    var docElemStyle = document.documentElement.style;\n    var transitionProperty = typeof docElemStyle.transition == \"string\" ? \"transition\" : \"WebkitTransition\";\n    var transformProperty = typeof docElemStyle.transform == \"string\" ? \"transform\" : \"WebkitTransform\";\n    var transitionEndEvent = {\n        WebkitTransition: \"webkitTransitionEnd\",\n        transition: \"transitionend\"\n    }[transitionProperty];\n    // cache all vendor properties that could have vendor prefix\n    var vendorProperties = {\n        transform: transformProperty,\n        transition: transitionProperty,\n        transitionDuration: transitionProperty + \"Duration\",\n        transitionProperty: transitionProperty + \"Property\",\n        transitionDelay: transitionProperty + \"Delay\"\n    };\n    // -------------------------- Item -------------------------- //\n    function Item(element, layout) {\n        if (!element) {\n            return;\n        }\n        this.element = element;\n        // parent layout class, i.e. Masonry, Isotope, or Packery\n        this.layout = layout;\n        this.position = {\n            x: 0,\n            y: 0\n        };\n        this._create();\n    }\n    // inherit EvEmitter\n    var proto = Item.prototype = Object.create(EvEmitter.prototype);\n    proto.constructor = Item;\n    proto._create = function() {\n        // transition objects\n        this._transn = {\n            ingProperties: {},\n            clean: {},\n            onEnd: {}\n        };\n        this.css({\n            position: \"absolute\"\n        });\n    };\n    // trigger specified handler for event type\n    proto.handleEvent = function(event) {\n        var method = \"on\" + event.type;\n        if (this[method]) {\n            this[method](event);\n        }\n    };\n    proto.getSize = function() {\n        this.size = getSize(this.element);\n    };\n    /**\n * apply CSS styles to element\n * @param {Object} style\n */ proto.css = function(style) {\n        var elemStyle = this.element.style;\n        for(var prop in style){\n            // use vendor property if available\n            var supportedProp = vendorProperties[prop] || prop;\n            elemStyle[supportedProp] = style[prop];\n        }\n    };\n    // measure position, and sets it\n    proto.getPosition = function() {\n        var style = getComputedStyle(this.element);\n        var isOriginLeft = this.layout._getOption(\"originLeft\");\n        var isOriginTop = this.layout._getOption(\"originTop\");\n        var xValue = style[isOriginLeft ? \"left\" : \"right\"];\n        var yValue = style[isOriginTop ? \"top\" : \"bottom\"];\n        var x = parseFloat(xValue);\n        var y = parseFloat(yValue);\n        // convert percent to pixels\n        var layoutSize = this.layout.size;\n        if (xValue.indexOf(\"%\") != -1) {\n            x = x / 100 * layoutSize.width;\n        }\n        if (yValue.indexOf(\"%\") != -1) {\n            y = y / 100 * layoutSize.height;\n        }\n        // clean up 'auto' or other non-integer values\n        x = isNaN(x) ? 0 : x;\n        y = isNaN(y) ? 0 : y;\n        // remove padding from measurement\n        x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;\n        y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;\n        this.position.x = x;\n        this.position.y = y;\n    };\n    // set settled position, apply padding\n    proto.layoutPosition = function() {\n        var layoutSize = this.layout.size;\n        var style = {};\n        var isOriginLeft = this.layout._getOption(\"originLeft\");\n        var isOriginTop = this.layout._getOption(\"originTop\");\n        // x\n        var xPadding = isOriginLeft ? \"paddingLeft\" : \"paddingRight\";\n        var xProperty = isOriginLeft ? \"left\" : \"right\";\n        var xResetProperty = isOriginLeft ? \"right\" : \"left\";\n        var x = this.position.x + layoutSize[xPadding];\n        // set in percentage or pixels\n        style[xProperty] = this.getXValue(x);\n        // reset other property\n        style[xResetProperty] = \"\";\n        // y\n        var yPadding = isOriginTop ? \"paddingTop\" : \"paddingBottom\";\n        var yProperty = isOriginTop ? \"top\" : \"bottom\";\n        var yResetProperty = isOriginTop ? \"bottom\" : \"top\";\n        var y = this.position.y + layoutSize[yPadding];\n        // set in percentage or pixels\n        style[yProperty] = this.getYValue(y);\n        // reset other property\n        style[yResetProperty] = \"\";\n        this.css(style);\n        this.emitEvent(\"layout\", [\n            this\n        ]);\n    };\n    proto.getXValue = function(x) {\n        var isHorizontal = this.layout._getOption(\"horizontal\");\n        return this.layout.options.percentPosition && !isHorizontal ? x / this.layout.size.width * 100 + \"%\" : x + \"px\";\n    };\n    proto.getYValue = function(y) {\n        var isHorizontal = this.layout._getOption(\"horizontal\");\n        return this.layout.options.percentPosition && isHorizontal ? y / this.layout.size.height * 100 + \"%\" : y + \"px\";\n    };\n    proto._transitionTo = function(x, y) {\n        this.getPosition();\n        // get current x & y from top/left\n        var curX = this.position.x;\n        var curY = this.position.y;\n        var didNotMove = x == this.position.x && y == this.position.y;\n        // save end position\n        this.setPosition(x, y);\n        // if did not move and not transitioning, just go to layout\n        if (didNotMove && !this.isTransitioning) {\n            this.layoutPosition();\n            return;\n        }\n        var transX = x - curX;\n        var transY = y - curY;\n        var transitionStyle = {};\n        transitionStyle.transform = this.getTranslate(transX, transY);\n        this.transition({\n            to: transitionStyle,\n            onTransitionEnd: {\n                transform: this.layoutPosition\n            },\n            isCleaning: true\n        });\n    };\n    proto.getTranslate = function(x, y) {\n        // flip cooridinates if origin on right or bottom\n        var isOriginLeft = this.layout._getOption(\"originLeft\");\n        var isOriginTop = this.layout._getOption(\"originTop\");\n        x = isOriginLeft ? x : -x;\n        y = isOriginTop ? y : -y;\n        return \"translate3d(\" + x + \"px, \" + y + \"px, 0)\";\n    };\n    // non transition + transform support\n    proto.goTo = function(x, y) {\n        this.setPosition(x, y);\n        this.layoutPosition();\n    };\n    proto.moveTo = proto._transitionTo;\n    proto.setPosition = function(x, y) {\n        this.position.x = parseFloat(x);\n        this.position.y = parseFloat(y);\n    };\n    // ----- transition ----- //\n    /**\n * @param {Object} style - CSS\n * @param {Function} onTransitionEnd\n */ // non transition, just trigger callback\n    proto._nonTransition = function(args) {\n        this.css(args.to);\n        if (args.isCleaning) {\n            this._removeStyles(args.to);\n        }\n        for(var prop in args.onTransitionEnd){\n            args.onTransitionEnd[prop].call(this);\n        }\n    };\n    /**\n * proper transition\n * @param {Object} args - arguments\n *   @param {Object} to - style to transition to\n *   @param {Object} from - style to start transition from\n *   @param {Boolean} isCleaning - removes transition styles after transition\n *   @param {Function} onTransitionEnd - callback\n */ proto.transition = function(args) {\n        // redirect to nonTransition if no transition duration\n        if (!parseFloat(this.layout.options.transitionDuration)) {\n            this._nonTransition(args);\n            return;\n        }\n        var _transition = this._transn;\n        // keep track of onTransitionEnd callback by css property\n        for(var prop in args.onTransitionEnd){\n            _transition.onEnd[prop] = args.onTransitionEnd[prop];\n        }\n        // keep track of properties that are transitioning\n        for(prop in args.to){\n            _transition.ingProperties[prop] = true;\n            // keep track of properties to clean up when transition is done\n            if (args.isCleaning) {\n                _transition.clean[prop] = true;\n            }\n        }\n        // set from styles\n        if (args.from) {\n            this.css(args.from);\n            // force redraw. http://blog.alexmaccaw.com/css-transitions\n            var h = this.element.offsetHeight;\n            // hack for JSHint to hush about unused var\n            h = null;\n        }\n        // enable transition\n        this.enableTransition(args.to);\n        // set styles that are transitioning\n        this.css(args.to);\n        this.isTransitioning = true;\n    };\n    // dash before all cap letters, including first for\n    // WebkitTransform => -webkit-transform\n    function toDashedAll(str) {\n        return str.replace(/([A-Z])/g, function($1) {\n            return \"-\" + $1.toLowerCase();\n        });\n    }\n    var transitionProps = \"opacity,\" + toDashedAll(transformProperty);\n    proto.enableTransition = function() {\n        // HACK changing transitionProperty during a transition\n        // will cause transition to jump\n        if (this.isTransitioning) {\n            return;\n        }\n        // make `transition: foo, bar, baz` from style object\n        // HACK un-comment this when enableTransition can work\n        // while a transition is happening\n        // var transitionValues = [];\n        // for ( var prop in style ) {\n        //   // dash-ify camelCased properties like WebkitTransition\n        //   prop = vendorProperties[ prop ] || prop;\n        //   transitionValues.push( toDashedAll( prop ) );\n        // }\n        // munge number to millisecond, to match stagger\n        var duration = this.layout.options.transitionDuration;\n        duration = typeof duration == \"number\" ? duration + \"ms\" : duration;\n        // enable transition styles\n        this.css({\n            transitionProperty: transitionProps,\n            transitionDuration: duration,\n            transitionDelay: this.staggerDelay || 0\n        });\n        // listen for transition end event\n        this.element.addEventListener(transitionEndEvent, this, false);\n    };\n    // ----- events ----- //\n    proto.onwebkitTransitionEnd = function(event) {\n        this.ontransitionend(event);\n    };\n    proto.onotransitionend = function(event) {\n        this.ontransitionend(event);\n    };\n    // properties that I munge to make my life easier\n    var dashedVendorProperties = {\n        \"-webkit-transform\": \"transform\"\n    };\n    proto.ontransitionend = function(event) {\n        // disregard bubbled events from children\n        if (event.target !== this.element) {\n            return;\n        }\n        var _transition = this._transn;\n        // get property name of transitioned property, convert to prefix-free\n        var propertyName = dashedVendorProperties[event.propertyName] || event.propertyName;\n        // remove property that has completed transitioning\n        delete _transition.ingProperties[propertyName];\n        // check if any properties are still transitioning\n        if (isEmptyObj(_transition.ingProperties)) {\n            // all properties have completed transitioning\n            this.disableTransition();\n        }\n        // clean style\n        if (propertyName in _transition.clean) {\n            // clean up style\n            this.element.style[event.propertyName] = \"\";\n            delete _transition.clean[propertyName];\n        }\n        // trigger onTransitionEnd callback\n        if (propertyName in _transition.onEnd) {\n            var onTransitionEnd = _transition.onEnd[propertyName];\n            onTransitionEnd.call(this);\n            delete _transition.onEnd[propertyName];\n        }\n        this.emitEvent(\"transitionEnd\", [\n            this\n        ]);\n    };\n    proto.disableTransition = function() {\n        this.removeTransitionStyles();\n        this.element.removeEventListener(transitionEndEvent, this, false);\n        this.isTransitioning = false;\n    };\n    /**\n * removes style property from element\n * @param {Object} style\n**/ proto._removeStyles = function(style) {\n        // clean up transition styles\n        var cleanStyle = {};\n        for(var prop in style){\n            cleanStyle[prop] = \"\";\n        }\n        this.css(cleanStyle);\n    };\n    var cleanTransitionStyle = {\n        transitionProperty: \"\",\n        transitionDuration: \"\",\n        transitionDelay: \"\"\n    };\n    proto.removeTransitionStyles = function() {\n        // remove transition\n        this.css(cleanTransitionStyle);\n    };\n    // ----- stagger ----- //\n    proto.stagger = function(delay) {\n        delay = isNaN(delay) ? 0 : delay;\n        this.staggerDelay = delay + \"ms\";\n    };\n    // ----- show/hide/remove ----- //\n    // remove element from DOM\n    proto.removeElem = function() {\n        this.element.parentNode.removeChild(this.element);\n        // remove display: none\n        this.css({\n            display: \"\"\n        });\n        this.emitEvent(\"remove\", [\n            this\n        ]);\n    };\n    proto.remove = function() {\n        // just remove element if no transition support or no transition\n        if (!transitionProperty || !parseFloat(this.layout.options.transitionDuration)) {\n            this.removeElem();\n            return;\n        }\n        // start transition\n        this.once(\"transitionEnd\", function() {\n            this.removeElem();\n        });\n        this.hide();\n    };\n    proto.reveal = function() {\n        delete this.isHidden;\n        // remove display: none\n        this.css({\n            display: \"\"\n        });\n        var options = this.layout.options;\n        var onTransitionEnd = {};\n        var transitionEndProperty = this.getHideRevealTransitionEndProperty(\"visibleStyle\");\n        onTransitionEnd[transitionEndProperty] = this.onRevealTransitionEnd;\n        this.transition({\n            from: options.hiddenStyle,\n            to: options.visibleStyle,\n            isCleaning: true,\n            onTransitionEnd: onTransitionEnd\n        });\n    };\n    proto.onRevealTransitionEnd = function() {\n        // check if still visible\n        // during transition, item may have been hidden\n        if (!this.isHidden) {\n            this.emitEvent(\"reveal\");\n        }\n    };\n    /**\n * get style property use for hide/reveal transition end\n * @param {String} styleProperty - hiddenStyle/visibleStyle\n * @returns {String}\n */ proto.getHideRevealTransitionEndProperty = function(styleProperty) {\n        var optionStyle = this.layout.options[styleProperty];\n        // use opacity\n        if (optionStyle.opacity) {\n            return \"opacity\";\n        }\n        // get first property\n        for(var prop in optionStyle){\n            return prop;\n        }\n    };\n    proto.hide = function() {\n        // set flag\n        this.isHidden = true;\n        // remove display: none\n        this.css({\n            display: \"\"\n        });\n        var options = this.layout.options;\n        var onTransitionEnd = {};\n        var transitionEndProperty = this.getHideRevealTransitionEndProperty(\"hiddenStyle\");\n        onTransitionEnd[transitionEndProperty] = this.onHideTransitionEnd;\n        this.transition({\n            from: options.visibleStyle,\n            to: options.hiddenStyle,\n            // keep hidden stuff hidden\n            isCleaning: true,\n            onTransitionEnd: onTransitionEnd\n        });\n    };\n    proto.onHideTransitionEnd = function() {\n        // check if still hidden\n        // during transition, item may have been un-hidden\n        if (this.isHidden) {\n            this.css({\n                display: \"none\"\n            });\n            this.emitEvent(\"hide\");\n        }\n    };\n    proto.destroy = function() {\n        this.css({\n            position: \"\",\n            left: \"\",\n            right: \"\",\n            top: \"\",\n            bottom: \"\",\n            transition: \"\",\n            transform: \"\"\n        });\n    };\n    return Item;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/outlayer/item.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/outlayer/outlayer.js":
/*!*******************************************!*\
  !*** ./node_modules/outlayer/outlayer.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n/*!\n * Outlayer v2.1.1\n * the brains and guts of a layout library\n * MIT license\n */ (function(window1, factory) {\n    \"use strict\";\n    // universal module definition\n    /* jshint strict: false */ /* globals define, module, require */ if (true) {\n        // AMD - RequireJS\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! ev-emitter/ev-emitter */ \"(ssr)/./node_modules/ev-emitter/ev-emitter.js\"),\n            __webpack_require__(/*! get-size/get-size */ \"(ssr)/./node_modules/get-size/get-size.js\"),\n            __webpack_require__(/*! fizzy-ui-utils/utils */ \"(ssr)/./node_modules/fizzy-ui-utils/utils.js\"),\n            __webpack_require__(/*! ./item */ \"(ssr)/./node_modules/outlayer/item.js\")\n        ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(EvEmitter, getSize, utils, Item) {\n            return factory(window1, EvEmitter, getSize, utils, Item);\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(window, function factory(window1, EvEmitter, getSize, utils, Item) {\n    \"use strict\";\n    // ----- vars ----- //\n    var console = window1.console;\n    var jQuery = window1.jQuery;\n    var noop = function() {};\n    // -------------------------- Outlayer -------------------------- //\n    // globally unique identifiers\n    var GUID = 0;\n    // internal store of all Outlayer intances\n    var instances = {};\n    /**\n * @param {Element, String} element\n * @param {Object} options\n * @constructor\n */ function Outlayer(element, options) {\n        var queryElement = utils.getQueryElement(element);\n        if (!queryElement) {\n            if (console) {\n                console.error(\"Bad element for \" + this.constructor.namespace + \": \" + (queryElement || element));\n            }\n            return;\n        }\n        this.element = queryElement;\n        // add jQuery\n        if (jQuery) {\n            this.$element = jQuery(this.element);\n        }\n        // options\n        this.options = utils.extend({}, this.constructor.defaults);\n        this.option(options);\n        // add id for Outlayer.getFromElement\n        var id = ++GUID;\n        this.element.outlayerGUID = id; // expando\n        instances[id] = this; // associate via id\n        // kick it off\n        this._create();\n        var isInitLayout = this._getOption(\"initLayout\");\n        if (isInitLayout) {\n            this.layout();\n        }\n    }\n    // settings are for internal use only\n    Outlayer.namespace = \"outlayer\";\n    Outlayer.Item = Item;\n    // default options\n    Outlayer.defaults = {\n        containerStyle: {\n            position: \"relative\"\n        },\n        initLayout: true,\n        originLeft: true,\n        originTop: true,\n        resize: true,\n        resizeContainer: true,\n        // item options\n        transitionDuration: \"0.4s\",\n        hiddenStyle: {\n            opacity: 0,\n            transform: \"scale(0.001)\"\n        },\n        visibleStyle: {\n            opacity: 1,\n            transform: \"scale(1)\"\n        }\n    };\n    var proto = Outlayer.prototype;\n    // inherit EvEmitter\n    utils.extend(proto, EvEmitter.prototype);\n    /**\n * set options\n * @param {Object} opts\n */ proto.option = function(opts) {\n        utils.extend(this.options, opts);\n    };\n    /**\n * get backwards compatible option value, check old name\n */ proto._getOption = function(option) {\n        var oldOption = this.constructor.compatOptions[option];\n        return oldOption && this.options[oldOption] !== undefined ? this.options[oldOption] : this.options[option];\n    };\n    Outlayer.compatOptions = {\n        // currentName: oldName\n        initLayout: \"isInitLayout\",\n        horizontal: \"isHorizontal\",\n        layoutInstant: \"isLayoutInstant\",\n        originLeft: \"isOriginLeft\",\n        originTop: \"isOriginTop\",\n        resize: \"isResizeBound\",\n        resizeContainer: \"isResizingContainer\"\n    };\n    proto._create = function() {\n        // get items from children\n        this.reloadItems();\n        // elements that affect layout, but are not laid out\n        this.stamps = [];\n        this.stamp(this.options.stamp);\n        // set container style\n        utils.extend(this.element.style, this.options.containerStyle);\n        // bind resize method\n        var canBindResize = this._getOption(\"resize\");\n        if (canBindResize) {\n            this.bindResize();\n        }\n    };\n    // goes through all children again and gets bricks in proper order\n    proto.reloadItems = function() {\n        // collection of item elements\n        this.items = this._itemize(this.element.children);\n    };\n    /**\n * turn elements into Outlayer.Items to be used in layout\n * @param {Array or NodeList or HTMLElement} elems\n * @returns {Array} items - collection of new Outlayer Items\n */ proto._itemize = function(elems) {\n        var itemElems = this._filterFindItemElements(elems);\n        var Item = this.constructor.Item;\n        // create new Outlayer Items for collection\n        var items = [];\n        for(var i = 0; i < itemElems.length; i++){\n            var elem = itemElems[i];\n            var item = new Item(elem, this);\n            items.push(item);\n        }\n        return items;\n    };\n    /**\n * get item elements to be used in layout\n * @param {Array or NodeList or HTMLElement} elems\n * @returns {Array} items - item elements\n */ proto._filterFindItemElements = function(elems) {\n        return utils.filterFindElements(elems, this.options.itemSelector);\n    };\n    /**\n * getter method for getting item elements\n * @returns {Array} elems - collection of item elements\n */ proto.getItemElements = function() {\n        return this.items.map(function(item) {\n            return item.element;\n        });\n    };\n    // ----- init & layout ----- //\n    /**\n * lays out all items\n */ proto.layout = function() {\n        this._resetLayout();\n        this._manageStamps();\n        // don't animate first layout\n        var layoutInstant = this._getOption(\"layoutInstant\");\n        var isInstant = layoutInstant !== undefined ? layoutInstant : !this._isLayoutInited;\n        this.layoutItems(this.items, isInstant);\n        // flag for initalized\n        this._isLayoutInited = true;\n    };\n    // _init is alias for layout\n    proto._init = proto.layout;\n    /**\n * logic before any new layout\n */ proto._resetLayout = function() {\n        this.getSize();\n    };\n    proto.getSize = function() {\n        this.size = getSize(this.element);\n    };\n    /**\n * get measurement from option, for columnWidth, rowHeight, gutter\n * if option is String -> get element from selector string, & get size of element\n * if option is Element -> get size of element\n * else use option as a number\n *\n * @param {String} measurement\n * @param {String} size - width or height\n * @private\n */ proto._getMeasurement = function(measurement, size) {\n        var option = this.options[measurement];\n        var elem;\n        if (!option) {\n            // default to 0\n            this[measurement] = 0;\n        } else {\n            // use option as an element\n            if (typeof option == \"string\") {\n                elem = this.element.querySelector(option);\n            } else if (option instanceof HTMLElement) {\n                elem = option;\n            }\n            // use size of element, if element\n            this[measurement] = elem ? getSize(elem)[size] : option;\n        }\n    };\n    /**\n * layout a collection of item elements\n * @api public\n */ proto.layoutItems = function(items, isInstant) {\n        items = this._getItemsForLayout(items);\n        this._layoutItems(items, isInstant);\n        this._postLayout();\n    };\n    /**\n * get the items to be laid out\n * you may want to skip over some items\n * @param {Array} items\n * @returns {Array} items\n */ proto._getItemsForLayout = function(items) {\n        return items.filter(function(item) {\n            return !item.isIgnored;\n        });\n    };\n    /**\n * layout items\n * @param {Array} items\n * @param {Boolean} isInstant\n */ proto._layoutItems = function(items, isInstant) {\n        this._emitCompleteOnItems(\"layout\", items);\n        if (!items || !items.length) {\n            // no items, emit event with empty array\n            return;\n        }\n        var queue = [];\n        items.forEach(function(item) {\n            // get x/y object from method\n            var position = this._getItemLayoutPosition(item);\n            // enqueue\n            position.item = item;\n            position.isInstant = isInstant || item.isLayoutInstant;\n            queue.push(position);\n        }, this);\n        this._processLayoutQueue(queue);\n    };\n    /**\n * get item layout position\n * @param {Outlayer.Item} item\n * @returns {Object} x and y position\n */ proto._getItemLayoutPosition = function() {\n        return {\n            x: 0,\n            y: 0\n        };\n    };\n    /**\n * iterate over array and position each item\n * Reason being - separating this logic prevents 'layout invalidation'\n * thx @paul_irish\n * @param {Array} queue\n */ proto._processLayoutQueue = function(queue) {\n        this.updateStagger();\n        queue.forEach(function(obj, i) {\n            this._positionItem(obj.item, obj.x, obj.y, obj.isInstant, i);\n        }, this);\n    };\n    // set stagger from option in milliseconds number\n    proto.updateStagger = function() {\n        var stagger = this.options.stagger;\n        if (stagger === null || stagger === undefined) {\n            this.stagger = 0;\n            return;\n        }\n        this.stagger = getMilliseconds(stagger);\n        return this.stagger;\n    };\n    /**\n * Sets position of item in DOM\n * @param {Outlayer.Item} item\n * @param {Number} x - horizontal position\n * @param {Number} y - vertical position\n * @param {Boolean} isInstant - disables transitions\n */ proto._positionItem = function(item, x, y, isInstant, i) {\n        if (isInstant) {\n            // if not transition, just set CSS\n            item.goTo(x, y);\n        } else {\n            item.stagger(i * this.stagger);\n            item.moveTo(x, y);\n        }\n    };\n    /**\n * Any logic you want to do after each layout,\n * i.e. size the container\n */ proto._postLayout = function() {\n        this.resizeContainer();\n    };\n    proto.resizeContainer = function() {\n        var isResizingContainer = this._getOption(\"resizeContainer\");\n        if (!isResizingContainer) {\n            return;\n        }\n        var size = this._getContainerSize();\n        if (size) {\n            this._setContainerMeasure(size.width, true);\n            this._setContainerMeasure(size.height, false);\n        }\n    };\n    /**\n * Sets width or height of container if returned\n * @returns {Object} size\n *   @param {Number} width\n *   @param {Number} height\n */ proto._getContainerSize = noop;\n    /**\n * @param {Number} measure - size of width or height\n * @param {Boolean} isWidth\n */ proto._setContainerMeasure = function(measure, isWidth) {\n        if (measure === undefined) {\n            return;\n        }\n        var elemSize = this.size;\n        // add padding and border width if border box\n        if (elemSize.isBorderBox) {\n            measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight + elemSize.borderLeftWidth + elemSize.borderRightWidth : elemSize.paddingBottom + elemSize.paddingTop + elemSize.borderTopWidth + elemSize.borderBottomWidth;\n        }\n        measure = Math.max(measure, 0);\n        this.element.style[isWidth ? \"width\" : \"height\"] = measure + \"px\";\n    };\n    /**\n * emit eventComplete on a collection of items events\n * @param {String} eventName\n * @param {Array} items - Outlayer.Items\n */ proto._emitCompleteOnItems = function(eventName, items) {\n        var _this = this;\n        function onComplete() {\n            _this.dispatchEvent(eventName + \"Complete\", null, [\n                items\n            ]);\n        }\n        var count = items.length;\n        if (!items || !count) {\n            onComplete();\n            return;\n        }\n        var doneCount = 0;\n        function tick() {\n            doneCount++;\n            if (doneCount == count) {\n                onComplete();\n            }\n        }\n        // bind callback\n        items.forEach(function(item) {\n            item.once(eventName, tick);\n        });\n    };\n    /**\n * emits events via EvEmitter and jQuery events\n * @param {String} type - name of event\n * @param {Event} event - original event\n * @param {Array} args - extra arguments\n */ proto.dispatchEvent = function(type, event, args) {\n        // add original event to arguments\n        var emitArgs = event ? [\n            event\n        ].concat(args) : args;\n        this.emitEvent(type, emitArgs);\n        if (jQuery) {\n            // set this.$element\n            this.$element = this.$element || jQuery(this.element);\n            if (event) {\n                // create jQuery event\n                var $event = jQuery.Event(event);\n                $event.type = type;\n                this.$element.trigger($event, args);\n            } else {\n                // just trigger with type if no event available\n                this.$element.trigger(type, args);\n            }\n        }\n    };\n    // -------------------------- ignore & stamps -------------------------- //\n    /**\n * keep item in collection, but do not lay it out\n * ignored items do not get skipped in layout\n * @param {Element} elem\n */ proto.ignore = function(elem) {\n        var item = this.getItem(elem);\n        if (item) {\n            item.isIgnored = true;\n        }\n    };\n    /**\n * return item to layout collection\n * @param {Element} elem\n */ proto.unignore = function(elem) {\n        var item = this.getItem(elem);\n        if (item) {\n            delete item.isIgnored;\n        }\n    };\n    /**\n * adds elements to stamps\n * @param {NodeList, Array, Element, or String} elems\n */ proto.stamp = function(elems) {\n        elems = this._find(elems);\n        if (!elems) {\n            return;\n        }\n        this.stamps = this.stamps.concat(elems);\n        // ignore\n        elems.forEach(this.ignore, this);\n    };\n    /**\n * removes elements to stamps\n * @param {NodeList, Array, or Element} elems\n */ proto.unstamp = function(elems) {\n        elems = this._find(elems);\n        if (!elems) {\n            return;\n        }\n        elems.forEach(function(elem) {\n            // filter out removed stamp elements\n            utils.removeFrom(this.stamps, elem);\n            this.unignore(elem);\n        }, this);\n    };\n    /**\n * finds child elements\n * @param {NodeList, Array, Element, or String} elems\n * @returns {Array} elems\n */ proto._find = function(elems) {\n        if (!elems) {\n            return;\n        }\n        // if string, use argument as selector string\n        if (typeof elems == \"string\") {\n            elems = this.element.querySelectorAll(elems);\n        }\n        elems = utils.makeArray(elems);\n        return elems;\n    };\n    proto._manageStamps = function() {\n        if (!this.stamps || !this.stamps.length) {\n            return;\n        }\n        this._getBoundingRect();\n        this.stamps.forEach(this._manageStamp, this);\n    };\n    // update boundingLeft / Top\n    proto._getBoundingRect = function() {\n        // get bounding rect for container element\n        var boundingRect = this.element.getBoundingClientRect();\n        var size = this.size;\n        this._boundingRect = {\n            left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,\n            top: boundingRect.top + size.paddingTop + size.borderTopWidth,\n            right: boundingRect.right - (size.paddingRight + size.borderRightWidth),\n            bottom: boundingRect.bottom - (size.paddingBottom + size.borderBottomWidth)\n        };\n    };\n    /**\n * @param {Element} stamp\n**/ proto._manageStamp = noop;\n    /**\n * get x/y position of element relative to container element\n * @param {Element} elem\n * @returns {Object} offset - has left, top, right, bottom\n */ proto._getElementOffset = function(elem) {\n        var boundingRect = elem.getBoundingClientRect();\n        var thisRect = this._boundingRect;\n        var size = getSize(elem);\n        var offset = {\n            left: boundingRect.left - thisRect.left - size.marginLeft,\n            top: boundingRect.top - thisRect.top - size.marginTop,\n            right: thisRect.right - boundingRect.right - size.marginRight,\n            bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom\n        };\n        return offset;\n    };\n    // -------------------------- resize -------------------------- //\n    // enable event handlers for listeners\n    // i.e. resize -> onresize\n    proto.handleEvent = utils.handleEvent;\n    /**\n * Bind layout to window resizing\n */ proto.bindResize = function() {\n        window1.addEventListener(\"resize\", this);\n        this.isResizeBound = true;\n    };\n    /**\n * Unbind layout to window resizing\n */ proto.unbindResize = function() {\n        window1.removeEventListener(\"resize\", this);\n        this.isResizeBound = false;\n    };\n    proto.onresize = function() {\n        this.resize();\n    };\n    utils.debounceMethod(Outlayer, \"onresize\", 100);\n    proto.resize = function() {\n        // don't trigger if size did not change\n        // or if resize was unbound. See #9\n        if (!this.isResizeBound || !this.needsResizeLayout()) {\n            return;\n        }\n        this.layout();\n    };\n    /**\n * check if layout is needed post layout\n * @returns Boolean\n */ proto.needsResizeLayout = function() {\n        var size = getSize(this.element);\n        // check that this.size and size are there\n        // IE8 triggers resize on body size change, so they might not be\n        var hasSizes = this.size && size;\n        return hasSizes && size.innerWidth !== this.size.innerWidth;\n    };\n    // -------------------------- methods -------------------------- //\n    /**\n * add items to Outlayer instance\n * @param {Array or NodeList or Element} elems\n * @returns {Array} items - Outlayer.Items\n**/ proto.addItems = function(elems) {\n        var items = this._itemize(elems);\n        // add items to collection\n        if (items.length) {\n            this.items = this.items.concat(items);\n        }\n        return items;\n    };\n    /**\n * Layout newly-appended item elements\n * @param {Array or NodeList or Element} elems\n */ proto.appended = function(elems) {\n        var items = this.addItems(elems);\n        if (!items.length) {\n            return;\n        }\n        // layout and reveal just the new items\n        this.layoutItems(items, true);\n        this.reveal(items);\n    };\n    /**\n * Layout prepended elements\n * @param {Array or NodeList or Element} elems\n */ proto.prepended = function(elems) {\n        var items = this._itemize(elems);\n        if (!items.length) {\n            return;\n        }\n        // add items to beginning of collection\n        var previousItems = this.items.slice(0);\n        this.items = items.concat(previousItems);\n        // start new layout\n        this._resetLayout();\n        this._manageStamps();\n        // layout new stuff without transition\n        this.layoutItems(items, true);\n        this.reveal(items);\n        // layout previous items\n        this.layoutItems(previousItems);\n    };\n    /**\n * reveal a collection of items\n * @param {Array of Outlayer.Items} items\n */ proto.reveal = function(items) {\n        this._emitCompleteOnItems(\"reveal\", items);\n        if (!items || !items.length) {\n            return;\n        }\n        var stagger = this.updateStagger();\n        items.forEach(function(item, i) {\n            item.stagger(i * stagger);\n            item.reveal();\n        });\n    };\n    /**\n * hide a collection of items\n * @param {Array of Outlayer.Items} items\n */ proto.hide = function(items) {\n        this._emitCompleteOnItems(\"hide\", items);\n        if (!items || !items.length) {\n            return;\n        }\n        var stagger = this.updateStagger();\n        items.forEach(function(item, i) {\n            item.stagger(i * stagger);\n            item.hide();\n        });\n    };\n    /**\n * reveal item elements\n * @param {Array}, {Element}, {NodeList} items\n */ proto.revealItemElements = function(elems) {\n        var items = this.getItems(elems);\n        this.reveal(items);\n    };\n    /**\n * hide item elements\n * @param {Array}, {Element}, {NodeList} items\n */ proto.hideItemElements = function(elems) {\n        var items = this.getItems(elems);\n        this.hide(items);\n    };\n    /**\n * get Outlayer.Item, given an Element\n * @param {Element} elem\n * @param {Function} callback\n * @returns {Outlayer.Item} item\n */ proto.getItem = function(elem) {\n        // loop through items to get the one that matches\n        for(var i = 0; i < this.items.length; i++){\n            var item = this.items[i];\n            if (item.element == elem) {\n                // return item\n                return item;\n            }\n        }\n    };\n    /**\n * get collection of Outlayer.Items, given Elements\n * @param {Array} elems\n * @returns {Array} items - Outlayer.Items\n */ proto.getItems = function(elems) {\n        elems = utils.makeArray(elems);\n        var items = [];\n        elems.forEach(function(elem) {\n            var item = this.getItem(elem);\n            if (item) {\n                items.push(item);\n            }\n        }, this);\n        return items;\n    };\n    /**\n * remove element(s) from instance and DOM\n * @param {Array or NodeList or Element} elems\n */ proto.remove = function(elems) {\n        var removeItems = this.getItems(elems);\n        this._emitCompleteOnItems(\"remove\", removeItems);\n        // bail if no items to remove\n        if (!removeItems || !removeItems.length) {\n            return;\n        }\n        removeItems.forEach(function(item) {\n            item.remove();\n            // remove item from collection\n            utils.removeFrom(this.items, item);\n        }, this);\n    };\n    // ----- destroy ----- //\n    // remove and disable Outlayer instance\n    proto.destroy = function() {\n        // clean up dynamic styles\n        var style = this.element.style;\n        style.height = \"\";\n        style.position = \"\";\n        style.width = \"\";\n        // destroy items\n        this.items.forEach(function(item) {\n            item.destroy();\n        });\n        this.unbindResize();\n        var id = this.element.outlayerGUID;\n        delete instances[id]; // remove reference to instance by id\n        delete this.element.outlayerGUID;\n        // remove data for jQuery\n        if (jQuery) {\n            jQuery.removeData(this.element, this.constructor.namespace);\n        }\n    };\n    // -------------------------- data -------------------------- //\n    /**\n * get Outlayer instance from element\n * @param {Element} elem\n * @returns {Outlayer}\n */ Outlayer.data = function(elem) {\n        elem = utils.getQueryElement(elem);\n        var id = elem && elem.outlayerGUID;\n        return id && instances[id];\n    };\n    // -------------------------- create Outlayer class -------------------------- //\n    /**\n * create a layout class\n * @param {String} namespace\n */ Outlayer.create = function(namespace, options) {\n        // sub-class Outlayer\n        var Layout = subclass(Outlayer);\n        // apply new options and compatOptions\n        Layout.defaults = utils.extend({}, Outlayer.defaults);\n        utils.extend(Layout.defaults, options);\n        Layout.compatOptions = utils.extend({}, Outlayer.compatOptions);\n        Layout.namespace = namespace;\n        Layout.data = Outlayer.data;\n        // sub-class Item\n        Layout.Item = subclass(Item);\n        // -------------------------- declarative -------------------------- //\n        utils.htmlInit(Layout, namespace);\n        // -------------------------- jQuery bridge -------------------------- //\n        // make into jQuery plugin\n        if (jQuery && jQuery.bridget) {\n            jQuery.bridget(namespace, Layout);\n        }\n        return Layout;\n    };\n    function subclass(Parent) {\n        function SubClass() {\n            Parent.apply(this, arguments);\n        }\n        SubClass.prototype = Object.create(Parent.prototype);\n        SubClass.prototype.constructor = SubClass;\n        return SubClass;\n    }\n    // ----- helpers ----- //\n    // how many milliseconds are in each unit\n    var msUnits = {\n        ms: 1,\n        s: 1000\n    };\n    // munge time-like parameter into millisecond number\n    // '0.4s' -> 40\n    function getMilliseconds(time) {\n        if (typeof time == \"number\") {\n            return time;\n        }\n        var matches = time.match(/(^\\d*\\.?\\d*)(\\w*)/);\n        var num = matches && matches[1];\n        var unit = matches && matches[2];\n        if (!num.length) {\n            return 0;\n        }\n        num = parseFloat(num);\n        var mult = msUnits[unit] || 1;\n        return num * mult;\n    }\n    // ----- fin ----- //\n    // back in global\n    Outlayer.Item = Item;\n    return Outlayer;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/outlayer/outlayer.js\n");

/***/ })

};
;